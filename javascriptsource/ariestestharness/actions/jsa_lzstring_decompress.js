// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import LZString from 'lz-string';
// END EXTRA CODE

/**
 * @param {string} value
 * @param {"AriesTestHarness.enum_lzstring_compression_mode._default"|"AriesTestHarness.enum_lzstring_compression_mode.compressToUTF16"|"AriesTestHarness.enum_lzstring_compression_mode.compressToBase64"|"AriesTestHarness.enum_lzstring_compression_mode.compressToEncodedURIComponent"|"AriesTestHarness.enum_lzstring_compression_mode.compressToUint8Array"} mode
 * @returns {Promise.<string>}
 */
export async function jsa_lzstring_decompress(value, mode) {
	// BEGIN USER CODE
	try{
		if(value==null)return Promise.reject("Invalid value parameter");
		if(mode==null)return Promise.reject("Invalid mode parameter");
		let decompressedvalue=null;
		switch(mode){
			case"_default":
					decompressedvalue=LZString.decompress(value);
					break;
			case"compressToUTF16":
					decompressedvalue=LZString.decompressFromUTF16(value);
					break;
			case"compressToBase64":
					decompressedvalue=LZString.decompressFromBase64(value);
					break;
			case"compressToEncodedURIComponent":
					decompressedvalue=LZString.decompressFromEncodedURIComponent(value);
					break;
			case"compressToUint8Array":
					decompressedvalue=LZString.decompressFromUint8Array(JSON.parse(value)).toString();
					break;
			default:
				return Promise.reject("Invalid mode parameter");
		}
		return Promise.resolve(decompressedvalue);
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
