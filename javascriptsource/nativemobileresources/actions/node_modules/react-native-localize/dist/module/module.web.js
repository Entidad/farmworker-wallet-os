<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
import { CURRENCIES, USES_FAHRENHEIT, USES_IMPERIAL, USES_RTL_LAYOUT } from "./constants";
function ensureCountryCode(countryCode) {
  return countryCode === "419" ? "UN" : countryCode.toUpperCase();
}
function splitLanguageTag(languageTag) {
  const [languageCode = "en", countryCode] = languageTag.split("-");
=======
import { USES_FAHRENHEIT, USES_IMPERIAL, USES_RTL_LAYOUT, CURRENCIES } from "./constants";
const canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);

function ensureCountryCode(countryCode) {
  return countryCode === "419" ? "UN" : countryCode.toUpperCase();
}

function splitLanguageTag(languageTag) {
  const [languageCode, countryCode] = languageTag.split("-");
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  return {
    languageCode,
    countryCode
  };
}
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
=======

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
function convertLanguageTagToLocale(languageTag, countryCodeFallback) {
  let {
    languageCode,
    countryCode
  } = splitLanguageTag(languageTag);
  languageCode = languageCode.toLowerCase();
  countryCode = ensureCountryCode(countryCode || countryCodeFallback);
  return {
    languageCode,
    countryCode,
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
    languageTag: `${languageCode}-${countryCode}`,
    isRTL: USES_RTL_LAYOUT.includes(languageCode)
  };
}
function getCurrentLocale() {
  return convertLanguageTagToLocale(navigator.language, getCountry());
}
=======
    languageTag: "".concat(languageCode, "-").concat(countryCode),
    isRTL: USES_RTL_LAYOUT.includes(languageCode)
  };
}

function getCurrentLocale() {
  return convertLanguageTagToLocale(navigator.language, getCountry());
}

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
export function getCalendar() {
  return "gregorian";
}
export function getCountry() {
  const {
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
    languages = [navigator.language]
  } = navigator;
  for (let i = 0; i < languages.length; i++) {
    const language = languages[i];
    if (!language) {
      continue;
    }
    const {
      countryCode
    } = splitLanguageTag(language);
=======
    languages
  } = navigator;

  for (let i = 0; i < languages.length; i++) {
    const {
      countryCode
    } = splitLanguageTag(languages[i]);

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
    if (countryCode) {
      return ensureCountryCode(countryCode);
    }
  }
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
=======

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  return "US";
}
export function getCurrencies() {
  const {
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
    languages = [navigator.language]
=======
    languages
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  } = navigator;
  const currencies = [];
  languages.forEach(language => {
    const {
      countryCode
    } = splitLanguageTag(language);
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
    if (countryCode) {
      const currency = CURRENCIES[ensureCountryCode(countryCode)];
      if (currency && currencies.indexOf(currency) === -1) {
=======

    if (countryCode) {
      const currency = CURRENCIES[ensureCountryCode(countryCode)];

      if (currencies.indexOf(currency) === -1) {
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
        currencies.push(currency);
      }
    }
  });
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
  if (currencies.length === 0) {
    currencies.push("USD");
  }
=======

  if (currencies.length === 0) {
    currencies.push("USD");
  }

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  return currencies;
}
export function getLocales() {
  const {
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
    languages = [navigator.language]
=======
    languages
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  } = navigator;
  const countryCode = getCountry();
  const cache = [];
  const locales = [];
  languages.forEach(language => {
    const locale = convertLanguageTagToLocale(language, countryCode);
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
=======

>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
    if (cache.indexOf(locale.languageTag) === -1) {
      locales.push(locale);
      cache.push(locale.languageTag);
    }
  });
  return locales;
}
export function getNumberFormatSettings() {
  const {
    languageTag
  } = getCurrentLocale();
  const formatter = new Intl.NumberFormat(languageTag);
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
  const separators = formatter.format(1000000.1).replace(/\d/g, "");
  return {
    decimalSeparator: separators[separators.length - 1] || ".",
    groupingSeparator: separators[0] || ","
=======
  const separators = [...formatter.format(1000000.1).replace(/\d/g, "")];
  return {
    decimalSeparator: separators[separators.length - 1],
    groupingSeparator: separators[0]
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
  };
}
export function getTemperatureUnit() {
  return USES_FAHRENHEIT.includes(getCountry()) ? "fahrenheit" : "celsius";
}
export function getTimeZone() {
  const {
    languageTag
  } = getCurrentLocale();
  const formatter = new Intl.DateTimeFormat(languageTag, {
    hour: "numeric"
  });
  return formatter.resolvedOptions().timeZone || "Etc/UTC";
}
export function uses24HourClock() {
  const {
    languageTag
  } = getCurrentLocale();
  const formatter = new Intl.DateTimeFormat(languageTag, {
    hour: "numeric"
  });
  return !formatter.format(new Date(2000, 0, 1, 20)).match(/am|pm/i);
}
export function usesMetricSystem() {
  return !USES_IMPERIAL.includes(getCountry());
}
<<<<<<< HEAD:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/dist/module/module.web.js
export function usesAutoDateAndTime() {
  return;
}
export function usesAutoTimeZone() {
  return;
=======
export function usesAutoDateAndTime() {}
export function usesAutoTimeZone() {}
export const handlers = new Set();

if (canUseDOM) {
  window.addEventListener("languagechange", () => {
    handlers.forEach(handler => handler());
  });
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8:javascriptsource/nativemobileresources/actions/node_modules/react-native-localize/lib/module/module.web.js
}
//# sourceMappingURL=module.web.js.map