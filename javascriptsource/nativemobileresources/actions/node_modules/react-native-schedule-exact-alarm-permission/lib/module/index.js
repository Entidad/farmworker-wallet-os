import { useEffect, useState } from 'react';
import { AppState, NativeModules, Platform } from 'react-native';
<<<<<<< HEAD
const LINKING_ERROR = `The package 'react-native-schedule-exact-alarm-permission' doesn't seem to be linked. Make sure: \n\n` + '- You rebuilt the app after installing the package\n' + '- You are not using Expo Go\n';
const ScheduleExactAlarmPermission = Platform.OS !== 'android' ? undefined : NativeModules.ScheduleEA ? NativeModules.ScheduleEA : new Proxy({}, {
=======
const LINKING_ERROR = `The package 'react-native-schedule-exact-alarm-permission' doesn't seem to be linked. Make sure: \n\n` + Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo Go\n';
const ScheduleExactAlarmPermission = NativeModules.ScheduleEA ? NativeModules.ScheduleEA : new Proxy({}, {
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
  get() {
    throw new Error(LINKING_ERROR);
  }
});
<<<<<<< HEAD
export const getPermission = ScheduleExactAlarmPermission === null || ScheduleExactAlarmPermission === void 0 ? void 0 : ScheduleExactAlarmPermission.getPermission;
export const checkPermission = () => {
  return new Promise((resolve, _) => {
    ScheduleExactAlarmPermission === null || ScheduleExactAlarmPermission === void 0 || ScheduleExactAlarmPermission.checkPermission(result => {
=======
export const getPermission = ScheduleExactAlarmPermission.getPermission;
export const checkPermission = () => {
  return new Promise((resolve, _) => {
    ScheduleExactAlarmPermission.checkPermission(result => {
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
      resolve(result);
    });
  });
};
export const useSEA = () => {
  const [state, setState] = useState(undefined);
  function check() {
<<<<<<< HEAD
    ScheduleExactAlarmPermission === null || ScheduleExactAlarmPermission === void 0 || ScheduleExactAlarmPermission.checkPermission(result => {
=======
    ScheduleExactAlarmPermission.checkPermission(result => {
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
      setState(result);
    });
  }
  useEffect(() => {
    check();
    const unsubscribe = AppState.addEventListener('change', appState => {
      if (appState.match(/active/)) {
        check();
      }
    });
    return () => {
      unsubscribe.remove();
    };
  }, []);
  return state;
};
//# sourceMappingURL=index.js.map