// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import "mx-global";
import { Platform, PermissionsAndroid } from 'react-native';
import RNFS from 'react-native-fs';
import FileViewer from 'react-native-file-viewer';

// BEGIN EXTRA CODE

/**
 * Save any base64 file to local storage and optionally open it.
 * @param {string} base64String - The base64 encoded file string.
 * @param {string} fileName - Desired file name with extension.
 * @param {boolean} openFile - Whether to open the file after saving.
 * @returns {Promise<{success: boolean, filePath?: string, errorType?: string, message: string}>}
 */
const saveBase64File = async (base64String, fileName, openFile = true) => {
  try {
    // Strip data URI prefix
    const cleanBase64 = base64String.replace(/^data:.*;base64,/, '');

    // Determine download directory, handling Android storage permissions
    let downloadDir = RNFS.DocumentDirectoryPath; // default
    if (Platform.OS === 'android') {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
        {
          title: 'Storage Permission',
          message: 'App needs permission to save files to your device',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        }
      );
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        downloadDir = RNFS.DownloadDirectoryPath;
      }
    }

    // Generate a unique file name to avoid collisions
    const parts = fileName.split('.');
    const ext = parts.pop();
    const name = parts.join('.') || 'file';
    const uniqueName = `${name}_${Date.now()}.${ext}`;
    const filePath = `${downloadDir}/${uniqueName}`;

    // Write the file
    await RNFS.writeFile(filePath, cleanBase64, 'base64');

    // Optionally open the file
    if (openFile) {
      try {
        await FileViewer.open(filePath);
        return true;
      } catch (openError) {
        console.warn('Open File error:', openError);
        console.warn('File saved but could not be opened.')
        return false;
      }
    }
    
    return true
  } catch (error) {
    console.error('Save error:', error);
    return false
  }
};

// END EXTRA CODE

/**
 * @param {string} base64String
 * @param {string} fileName
 * @returns {Promise.<boolean>}
 */
export async function Download_Base64_File(base64String, fileName) {
	// BEGIN USER CODE
  const result = await saveBase64File(base64String, fileName, true);
  if (!result.success) {
    // Throw so Mendix microflow can catch and show an error
    throw new Error(result.message);
  }
	// END USER CODE
}
