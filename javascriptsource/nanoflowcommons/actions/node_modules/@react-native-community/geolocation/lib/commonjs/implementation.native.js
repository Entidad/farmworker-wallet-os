<<<<<<< HEAD
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearWatch = clearWatch;
exports.getCurrentPosition = getCurrentPosition;
exports.requestAuthorization = requestAuthorization;
exports.setRNConfiguration = setRNConfiguration;
exports.stopObserving = stopObserving;
exports.watchPosition = watchPosition;
var _nativeInterface = _interopRequireDefault(require("./nativeInterface"));
var _invariant = _interopRequireDefault(require("invariant"));
var _utils = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Copyright (c) React Native Community
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

const {
  RNCGeolocation,
  GeolocationEventEmitter
} = _nativeInterface.default;
let subscriptions = {};
let updatesEnabled = false;

/**
 * The Geolocation API extends the web spec:
 * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html
 */

/*
 * Sets configuration options that will be used in all location requests.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#setrnconfiguration
 *
 */
function setRNConfiguration(config) {
  RNCGeolocation.setConfiguration({
    ...config,
    enableBackgroundLocationUpdates: config?.enableBackgroundLocationUpdates ?? true,
    authorizationLevel: config?.authorizationLevel === 'auto' ? undefined : config.authorizationLevel,
    locationProvider: config?.locationProvider === 'auto' ? undefined : config.locationProvider
  });
}

/*
 * Requests Location permissions based on the key configured on pList.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#requestauthorization
 */
function requestAuthorization(success = () => {}, error = _utils.logError) {
  RNCGeolocation.requestAuthorization(success, error);
}

/*
 * Invokes the success callback once with the latest location info.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#getcurrentposition
 */
async function getCurrentPosition(success, error = _utils.logError, options = {}) {
  (0, _invariant.default)(typeof success === 'function', 'Must provide a valid geo_success callback.');
  // Permission checks/requests are done on the native side
  RNCGeolocation.getCurrentPosition(options, success, error);
}

/*
 * Invokes the success callback whenever the location changes.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#watchposition
 */
function watchPosition(success, error = _utils.logError, options = {}) {
  if (!updatesEnabled) {
    RNCGeolocation.startObserving(options);
    updatesEnabled = true;
  }
  const watchID = Object.keys(subscriptions).length + 1000;
  subscriptions[watchID] = [GeolocationEventEmitter.addListener('geolocationDidChange', success), error ? GeolocationEventEmitter.addListener('geolocationError', error) : null];
  return watchID;
}

/*
 * Unsubscribes the watcher with the given watchID.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#clearwatch
 */
function clearWatch(watchID) {
  const sub = subscriptions[watchID];
  if (!sub) {
    // Silently exit when the watchID is invalid or already cleared
    // This is consistent with timers
    return;
  }
  sub[0].remove();
  // array element refinements not yet enabled in Flow
  const sub1 = sub[1];
  sub1 && sub1.remove();
  delete subscriptions[watchID];
  let noWatchers = Object.keys(subscriptions).length === 0;
  if (noWatchers) {
    stopObserving();
  }
}

/*
 * Stops observing for device location changes and removes all registered listeners.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#stopobserving
 */
function stopObserving() {
  if (updatesEnabled) {
    RNCGeolocation.stopObserving();
    updatesEnabled = false;
    Object.values(subscriptions).forEach(([sub, sub1]) => {
      (0, _utils.warning)(false, 'Called stopObserving with existing subscriptions.');
      sub.remove();
      sub1 && sub1.remove();
    });
    subscriptions = {};
  }
}
=======
var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _nativeInterface=require("./nativeInterface");var _invariant=_interopRequireDefault(require("invariant"));var _utils=require("./utils");var subscriptions=[];var updatesEnabled=false;var Geolocation={setRNConfiguration:function setRNConfiguration(config){if(_nativeInterface.RNCGeolocation.setConfiguration){_nativeInterface.RNCGeolocation.setConfiguration(config);}},requestAuthorization:function requestAuthorization(){_nativeInterface.RNCGeolocation.requestAuthorization();},getCurrentPosition:function getCurrentPosition(geo_success,geo_error,geo_options){return _regenerator.default.async(function getCurrentPosition$(_context){while(1){switch(_context.prev=_context.next){case 0:(0,_invariant.default)(typeof geo_success==='function','Must provide a valid geo_success callback.');_nativeInterface.RNCGeolocation.getCurrentPosition(geo_options||{},geo_success,geo_error||_utils.logError);case 2:case"end":return _context.stop();}}});},watchPosition:function watchPosition(success,error,options){if(!updatesEnabled){_nativeInterface.RNCGeolocation.startObserving(options||{});updatesEnabled=true;}var watchID=subscriptions.length;subscriptions.push([_nativeInterface.GeolocationEventEmitter.addListener('geolocationDidChange',success),error?_nativeInterface.GeolocationEventEmitter.addListener('geolocationError',error):null]);return watchID;},clearWatch:function clearWatch(watchID){var sub=subscriptions[watchID];if(!sub){return;}sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();subscriptions[watchID]=undefined;var noWatchers=true;for(var ii=0;ii<subscriptions.length;ii++){if(subscriptions[ii]){noWatchers=false;}}if(noWatchers){Geolocation.stopObserving();}},stopObserving:function stopObserving(){if(updatesEnabled){_nativeInterface.RNCGeolocation.stopObserving();updatesEnabled=false;for(var ii=0;ii<subscriptions.length;ii++){var sub=subscriptions[ii];if(sub){(0,_utils.warning)(false,'Called stopObserving with existing subscriptions.');sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();}}subscriptions=[];}}};module.exports=Geolocation;
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
//# sourceMappingURL=implementation.native.js.map