<<<<<<< HEAD
/**
 * Copyright (c) React Native Community
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

import GeolocationNativeInterface from './nativeInterface';
import invariant from 'invariant';
import { logError, warning } from './utils';
const {
  RNCGeolocation,
  GeolocationEventEmitter
} = GeolocationNativeInterface;
let subscriptions = {};
let updatesEnabled = false;

/**
 * The Geolocation API extends the web spec:
 * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html
 */

/*
 * Sets configuration options that will be used in all location requests.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#setrnconfiguration
 *
 */
export function setRNConfiguration(config) {
  RNCGeolocation.setConfiguration({
    ...config,
    enableBackgroundLocationUpdates: config?.enableBackgroundLocationUpdates ?? true,
    authorizationLevel: config?.authorizationLevel === 'auto' ? undefined : config.authorizationLevel,
    locationProvider: config?.locationProvider === 'auto' ? undefined : config.locationProvider
  });
}

/*
 * Requests Location permissions based on the key configured on pList.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#requestauthorization
 */
export function requestAuthorization(success = () => {}, error = logError) {
  RNCGeolocation.requestAuthorization(success, error);
}

/*
 * Invokes the success callback once with the latest location info.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#getcurrentposition
 */
export async function getCurrentPosition(success, error = logError, options = {}) {
  invariant(typeof success === 'function', 'Must provide a valid geo_success callback.');
  // Permission checks/requests are done on the native side
  RNCGeolocation.getCurrentPosition(options, success, error);
}

/*
 * Invokes the success callback whenever the location changes.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#watchposition
 */
export function watchPosition(success, error = logError, options = {}) {
  if (!updatesEnabled) {
    RNCGeolocation.startObserving(options);
    updatesEnabled = true;
  }
  const watchID = Object.keys(subscriptions).length + 1000;
  subscriptions[watchID] = [GeolocationEventEmitter.addListener('geolocationDidChange', success), error ? GeolocationEventEmitter.addListener('geolocationError', error) : null];
  return watchID;
}

/*
 * Unsubscribes the watcher with the given watchID.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#clearwatch
 */
export function clearWatch(watchID) {
  const sub = subscriptions[watchID];
  if (!sub) {
    // Silently exit when the watchID is invalid or already cleared
    // This is consistent with timers
    return;
  }
  sub[0].remove();
  // array element refinements not yet enabled in Flow
  const sub1 = sub[1];
  sub1 && sub1.remove();
  delete subscriptions[watchID];
  let noWatchers = Object.keys(subscriptions).length === 0;
  if (noWatchers) {
    stopObserving();
  }
}

/*
 * Stops observing for device location changes and removes all registered listeners.
 *
 * See https://facebook.github.io/react-native/docs/geolocation.html#stopobserving
 */
export function stopObserving() {
  if (updatesEnabled) {
    RNCGeolocation.stopObserving();
    updatesEnabled = false;
    Object.values(subscriptions).forEach(([sub, sub1]) => {
      warning(false, 'Called stopObserving with existing subscriptions.');
      sub.remove();
      sub1 && sub1.remove();
    });
    subscriptions = {};
  }
}
=======
import _regeneratorRuntime from"@babel/runtime/regenerator";import{RNCGeolocation,GeolocationEventEmitter}from'./nativeInterface';import invariant from'invariant';import{logError,warning}from'./utils';var subscriptions=[];var updatesEnabled=false;var Geolocation={setRNConfiguration:function setRNConfiguration(config){if(RNCGeolocation.setConfiguration){RNCGeolocation.setConfiguration(config);}},requestAuthorization:function requestAuthorization(){RNCGeolocation.requestAuthorization();},getCurrentPosition:function getCurrentPosition(geo_success,geo_error,geo_options){return _regeneratorRuntime.async(function getCurrentPosition$(_context){while(1){switch(_context.prev=_context.next){case 0:invariant(typeof geo_success==='function','Must provide a valid geo_success callback.');RNCGeolocation.getCurrentPosition(geo_options||{},geo_success,geo_error||logError);case 2:case"end":return _context.stop();}}});},watchPosition:function watchPosition(success,error,options){if(!updatesEnabled){RNCGeolocation.startObserving(options||{});updatesEnabled=true;}var watchID=subscriptions.length;subscriptions.push([GeolocationEventEmitter.addListener('geolocationDidChange',success),error?GeolocationEventEmitter.addListener('geolocationError',error):null]);return watchID;},clearWatch:function clearWatch(watchID){var sub=subscriptions[watchID];if(!sub){return;}sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();subscriptions[watchID]=undefined;var noWatchers=true;for(var ii=0;ii<subscriptions.length;ii++){if(subscriptions[ii]){noWatchers=false;}}if(noWatchers){Geolocation.stopObserving();}},stopObserving:function stopObserving(){if(updatesEnabled){RNCGeolocation.stopObserving();updatesEnabled=false;for(var ii=0;ii<subscriptions.length;ii++){var sub=subscriptions[ii];if(sub){warning(false,'Called stopObserving with existing subscriptions.');sub[0].remove();var sub1=sub[1];sub1&&sub1.remove();}}subscriptions=[];}}};module.exports=Geolocation;
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
//# sourceMappingURL=implementation.native.js.map