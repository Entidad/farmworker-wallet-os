<<<<<<< HEAD
/**
 * Copyright (c) React Native Community
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

export function setRNConfiguration(_config) {
  throw new Error('setRNConfiguration is not supported by the browser');
}
export function requestAuthorization(_success, _error) {
  throw new Error('requestAuthorization is not supported by the browser');
}
export async function getCurrentPosition(success, error, options) {
  if (typeof success !== 'function') {
    throw new Error('success callback must be a function');
  } else if (!navigator || !navigator.geolocation) {
    console.error('Navigator is undefined');
    return;
  }
  navigator.geolocation.getCurrentPosition(success, error, options);
}
export function watchPosition(success, error, options) {
  if (typeof success !== 'function') {
    throw new Error('success callback must be a function');
  } else if (!navigator || !navigator.geolocation) {
    throw new Error('Navigator is undefined');
  }
  return navigator.geolocation.watchPosition(success, error, options);
}
export function clearWatch(watchID) {
  if (!navigator || !navigator.geolocation) {
    console.error('Navigator is undefined');
    return;
  }
  navigator.geolocation.clearWatch(watchID);
}
export function stopObserving() {
  throw new Error('stopObserving is not supported by the browser');
}
=======
import _regeneratorRuntime from"@babel/runtime/regenerator";var Geolocation={setRNConfiguration:function setRNConfiguration(){throw new Error('method not supported by the browser');},requestAuthorization:function requestAuthorization(){throw new Error('method not supported by the browser');},getCurrentPosition:function getCurrentPosition(success,error,options){return _regeneratorRuntime.async(function getCurrentPosition$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof success!=='function')){_context.next=4;break;}throw new Error('success callback must be a function');case 4:if(!(!navigator||!navigator.geolocation)){_context.next=7;break;}console.error('Navigator is undefined');return _context.abrupt("return");case 7:navigator.geolocation.getCurrentPosition(success,error,options);case 8:case"end":return _context.stop();}}});},watchPosition:function watchPosition(success,error,options){if(typeof success!=='function'){throw new Error('success callback must be a function');}else if(!navigator||!navigator.geolocation){console.error('Navigator is undefined');return;}navigator.geolocation.watchPosition(success,error,options);},clearWatch:function clearWatch(watchID){if(!navigator||!navigator.geolocation){console.error('Navigator is undefined');return;}navigator.geolocation.clearWatch(watchID);},stopObserving:function stopObserving(){throw new Error('method not supported by the browser');}};module.exports=Geolocation;
>>>>>>> aec85746435d3ba41358c5b7d65f93f87448e5b8
//# sourceMappingURL=implementation.js.map