// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import {jsa_mxobj2json}from"./jsa_mxobj2json.js";
import {jsa_web_setItem}from"./jsa_web_setItem.js";
import {jsa_web_getItem}from"./jsa_web_getItem.js";
import {jsa_uuid}from"./jsa_uuid.js";
import SInfo from "react-native-sensitive-info";
async function mx_data_get_async(options){
	return new Promise((resolve,reject)=>{
		options.callback=(o)=>{
			resolve(o);
		}
		options.error=(e)=>{
			reject(e);
		}
		try{
			mx.data.get(options);
		}catch(e){
			reject(e);
		}
	});
}
// END EXTRA CODE

/**
 * Store Mendix object in keychain
 * 
 * key -> string
 *   main key to store under in the keychain
 * input -> Mendix Object
 *   the mendix object to store
 * idattr -> optional string
 *   attribute to use as subkey within the main key
 * idval -> optional string
 *   manual id value
 * hint -> optional json string
 *   translation hint, e.g. {"@id":0,"foo#":0} will store attributes like id against a key called @id and attributes like foo against a key called foo#
 * @param {string} key
 * @param {MxObject} input
 * @param {string} idattr - optional, name of attribute containing id
 * @param {string} idval - optional, manual id value
 * @param {string} hint - optional json string
 * @returns {Promise.<string>}
 */
export async function jsa_kcorm_put(key, input, idattr, idval, hint) {
	// BEGIN USER CODE
	try{
		if(input==null)return Promise.reject("Argument input null");
		if(key==null)return Promise.reject("Argument key null");
		let obj={};
		try{
			let kcval=null;
			if(window&&window.cordova){
				//hybrid mobile
				return Promise.reject("Hybrid_mobile not supported");
			}else if (navigator && navigator.product === "ReactNative") {
				//react native
				kcval=await SInfo.getItem(key,{});
			}else {
				//web
				kcval=await jsa_web_getItem(null,key);
			}
			//https://mcodex.dev/react-native-sensitive-info/docs/getItem
			if(kcval!=null&&kcval!="")try{
				obj=JSON.parse(kcval);
				obj=typeof(obj)=="object"?obj:Array.isArray(obj)?{}:obj;
			}catch(e){
				console.error(e.toString());
				//todo:handle/log
			}
		}catch(e){
			//todo:handle/log
			console.error(e.toString());
		}
		let module_=input.getEntity().split(".")[0];
		if(module_==null||module_=="")return Promise.reject("Invalid entity module name")
		let entity_=input.getEntity().split(".")[1];
		if(entity_==null||entity_=="")return Promise.reject("Invalid entity name")
		if(typeof(obj[module_])!="object")obj[module_]={};
		if(typeof(obj[module_][entity_])!="object")obj[module_][entity_]={};
		//here we generate the uuid based on some options
		let uuid=null;
		// 1. by idattr field as specified in the java action parameter
		if(idattr!=null&&input.has(idattr)&&input.get(idattr)!=null){
			uuid=input.get(idattr);
		// 2. by field with name "mxid" "id_" or "_id"
		}else if(input.has("mxid")&&input.get("mxid")!=null){
			uuid=input.get("mxid");
		}else if(input.has("_id")&&input.get("_id")!=null){
			uuid=input.get("_id");
		}else if(input.has("id_")&&input.get("id_")!=null){
			uuid=input.get("id_");
		}
		// 3. by manual id value or uuid from a utility function 
		if(uuid==null||typeof(uuid)!="string"||uuid.length==0){
			if(idval!=null&&typeof(idval)=="string"&&idval.length==0){
				uuid=idval;
			}else{
				uuid=await jsa_uuid();
			}
		}
		//update mendix object keychain id field
		if(idattr!=null&&input.has(idattr)){
			input.set(idattr,uuid);
		// 2. by field with name "mxid" "id_" or "_id"
		}else if(input.has("mxid")){
			input.set("mxid",uuid);
		}else if(input.has("id_")){
			input.set("id_",uuid);
		}else if(input.has("_id")){
			input.set("_id",uuid);
		}
		// 3. todo: get associations and reverse associations
		//          populate for lookups
		//			see jsa_mxobj_recurse
		// 4. serialize mendix object
		let jsoninput=await jsa_mxobj2json(input,hint);
		// 5. repopulate association values (in progress)
		{//test
			let _=JSON.parse(jsoninput);
			let _keys=Object.keys(_);
			for(var i=0;i<_keys.length;i++){
				let k=_keys[i];
				if(k.split(".").length>1){
					if(input.has(k)){
						let v=_[k];//input.get(k)
						if(v==null||v=="")continue;
						let __=await mx_data_get_async({guid:v});
						if(__!=null){
							//console.info("reference acquired");
							let __idattr=null;
							let __id=null;
							if(__.has("mxid")){
								__idattr="mxid";
							}else if(__.has("_id")){
								__idattr="_id";
							}else if(__.has("id_")){
								__idattr="id_";
							}else{
								console.error("reference object does not have a valid key (id_ or _id)")
							}
							if(__idattr!=null){
								__id=__.get(__idattr);
								if(__id==null||__id==""||__id.indexOf("GUID")==0){
									//console.info("key not found, adding");
									__id=await jsa_uuid();
									__.set(__idattr,__id);
								}else{
									//console.info("key found: "+__id);
								}
								_[k]=__id;
							}else{
								console.error("reference does not have a valid key attribute")
							}
						}else{
							console.error("reference not acquired");
						}
					}else{
						console.error(k+" not an attribute");
					}
				}
			}
			jsoninput=JSON.stringify(_);
		}
		//todo: regenerate uuid if already present in the object
		obj[module_][entity_][uuid]=JSON.parse(jsoninput);
		//store in keychain
		if(window && window.cordova){
			//hybrid mobile
			return Promise.reject("Hybrid_mobile not supported");
		}else if (navigator && navigator.product === "ReactNative") {
			//react native
			await SInfo.setItem(key,JSON.stringify(obj),{});	
		}else {
			//web
			//await jsa_web_setItem(sharedPreferencesName,key,value);
			await jsa_web_setItem(null,key,JSON.stringify(obj));
		}
		return Promise.resolve(uuid);
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
