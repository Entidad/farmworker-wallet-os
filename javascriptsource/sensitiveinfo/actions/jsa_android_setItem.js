// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import SInfo from "react-native-sensitive-info";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * https://mcodex.dev/react-native-sensitive-info/docs/setItem
 * Insert new data into the storage.
 * 
 * key:
 *     Key of item to set
 * 
 * value:
 *     Value to set item to
 * 
 * sharedPreferencesName:
 *     You can choose the shared preferences' name which you want to use. Otherwise, the default is shared_preferences
 * 
 * touchID:
 *     Enable fingerprint authentication for Android and TouchID for iOS.
 * 
 * showModal:
 *    When showModal is true, an Android native prompt will show up asking for user's authentication.
 * 
 * strings_*:
 *     You can control strings associated with a modal prompt via strings option:
 * @param {string} key
 * @param {string} value
 * @param {string} sharedPreferencesName - You can choose the shared preferences' name which you want to use. Otherwise, the default is shared_preferences
 * @param {boolean} touchID - Enable fingerprint authentication
 * @param {boolean} showModal - When showModal is true, an Android native prompt will show up asking for user's authentication.
 * @param {string} strings_header - Control strings associated with a modal prompt
 * @param {string} strings_description - Control strings associated with a modal prompt
 * @param {string} strings_hint - Control strings associated with a modal prompt
 * @param {string} strings_success - Control strings associated with a modal prompt
 * @param {string} strings_notRecognized - Control strings associated with a modal prompt
 * @param {string} strings_cancel - Control strings associated with a modal prompt
 * @param {string} strings_cancelled - Control strings associated with a modal prompt
 * @param {boolean} setInvalidatedByBiometricEnrollment - Reinitialise biometric enrollment
 * @returns {Promise.<void>}
 */
export async function jsa_android_setItem(key, value, sharedPreferencesName, touchID, showModal, strings_header, strings_description, strings_hint, strings_success, strings_notRecognized, strings_cancel, strings_cancelled, setInvalidatedByBiometricEnrollment) {
	// BEGIN USER CODE
	return new Promise(async(resolve,reject)=>{
		try{
			let settings={};
			settings.sharedPreferencesName=sharedPreferencesName;
			settings.touchID=touchID;
			settings.showModal=showModal;
			if(
				showModal&&
				strings_header!=null&&
				strings_description!=null&&
				strings_hint!=null&&
				strings_success!=null&&
				strings_notRecognized!=null&&
				strings_cancel!=null&&
				strings_cancelled!=null
			){
				settings.strings={};
				if(strings_header!=null)settings.strings.header=strings_header;
				if(strings_description!=null)settings.strings.description=strings_description;
				if(strings_hint!=null)settings.strings.hint=strings_hint;
				if(strings_success!=null)settings.strings.success=strings_success;
				if(strings_notRecognized!=null)settings.strings.notRecognized=strings_notRecognized;
				if(strings_cancel!=null)settings.strings.cancel=strings_cancel;
				if(strings_cancelled!=null)settings.strings.cancelled=strings_cancelled;
			}
			settings.setInvalidatedByBiometricEnrollment=setInvalidatedByBiometricEnrollment;
			const data=await SInfo.setItem(key,value,settings);	
			resolve();
		}catch(e){
			reject(e.toString());
		}
	});
	// END USER CODE
}
