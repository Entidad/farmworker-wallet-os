// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import {jsa_mxobj2json} from"./jsa_mxobj2json.js";
import {jsa_uuid} from"./jsa_uuid.js";
import SInfo from "react-native-sensitive-info";
// END EXTRA CODE

/**
 * Removes Mendix object from keychain
 * @param {string} key
 * @param {MxObject} input
 * @param {string} idattr - optional, name of attribute containing id
 * @param {string} idval - optional, manual id value
 * @returns {Promise.<boolean>}
 */
export async function jsa_kcorm_rm(key, input, idattr, idval) {
	// BEGIN USER CODE
	try{
		if(input==null)return Promise.reject("Argument input null");
		if(key==null)return Promise.reject("Argument key null");
		let obj={};
		try{
			//https://mcodex.dev/react-native-sensitive-info/docs/getItem
			let kcval=await SInfo.getItem(key,{});
			if(kcval!=null&&kcval!="")try{
				obj=JSON.parse(kcval);
				obj=typeof(obj)=="object"?obj:Array.isArray(obj)?{}:obj;
			}catch(e){
				console.error(e.toString());
				//todo:handle/log
			}
		}catch(e){
			//todo:handle/log
			console.error(e.toString());
		}
		let module_=input.getEntity().split(".")[0];
		if(module_==null||module_=="")return Promise.reject("Invalid entity module name")
		let entity_=input.getEntity().split(".")[1];
		if(entity_==null||entity_=="")return Promise.reject("Invalid entity name")
		//throw on module or entity subobjects not found 
		if(typeof(obj[module_])!="object")return Promise.resolve(true);//Promise.reject("Module "+module_+" not found");
		if(typeof(obj[module_][entity_])!="object")return Promise.resolve(true);//Promise.reject("Entity "+entity_+" not found");
		let uuid=null;
		// 1. by id_ field as specified in the java action parameter
		if(idattr!=null&&input.has(idattr)&&input.get(idattr)!=null){
			uuid=input.get(idattr);
		// 2. by field with name "id_"
		}else if(input.has("mxid")&&input.get("mxid")!=null){
			uuid=input.get("mxid");
		}else if(input.has("id_")&&input.get("id_")!=null){
			uuid=input.get("id_");
		}else if(input.has("_id")&&input.get("_id")!=null){
			uuid=input.get("_id");
		}
		// 3. by manual id value or uuid from a utility function 
		if(uuid==null||typeof(uuid)!="string"||uuid.length==0){
			if(idval!=null&&typeof(idval)=="string"&&idval.length==0){
				uuid=idval;
			}else{
				return Promise.reject("Cannot determine id");
			}
		}
		console.info("Dropping "+[module_,entity_,uuid].join("."));
		if(typeof(obj[module_][entity_][uuid])=="undefined")return Promise.resolve(true);//Promise.reject([module_,entity_,uuid].join(".")+" not found")
		delete obj[module_][entity_][uuid];
		//store in keychain
		await SInfo.setItem(key,JSON.stringify(obj),{});	
		//update mendix object keychain id field
		if(idattr!=null&&input.has(idattr)){
			input.set(idattr,null);
		// 2. by field with name "id_"
		}else if(input.has("mxid")){
			input.set("mxid",null);
		}else if(input.has("id_")){
			input.set("id_",null);
		}else if(input.has("_id")){
			input.set("_id",null);
		}
		//todo:handle true false return values
		return Promise.resolve(true);
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
