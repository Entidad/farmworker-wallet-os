// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
const keywords=[
	"abstract",
	"assert",
	"boolean",
	"break",
	"byte",
	"case",
	"catch",
	"char",
	"class",
	"const",
	"continue",
	"default",
	"do",
	"double",
	"else",
	"enum",
	"extends",
	"false",
	"final",
	"finally",
	"float",
	"for",
	"if",
	"goto",
	"implements",
	"import",
	"instanceof",
	"int",
	"interface",
	"long",
	"native",
	"new",
	"null",
	"package",
	"private",
	"protected",
	"public",
	"return",
	"short",
	"static",
	"strictfp",
	"super",
	"switch",
	"synchronized",
	"this",
	"throw",
	"throws",
	"transient",
	"true",
	"try",
	"void",
	"volatile",
	"while",
	"currentUser",
	"object",
	"type",
	"guid",
	"id",
	"submetaobjectname",
	"createddate",
	"changeddate",
	"owner",
	"changedby",
	"empty",
	"MendixObject",
	"context",
	"__filename__",
	"con"
];
// END EXTRA CODE

/**
 * Serializes input typeparameter Mendix object  to JSON string
 * @param {MxObject} input
 * @returns {Promise.<string>}
 */
export async function jsa_mxobj2json_v0(input) {
	// BEGIN USER CODE
	try{
		let json={};
		input.getAttributes().forEach((attr)=>{
			let attr_=attr;
			//console.info(`attr:${attr}`);
			keywords.forEach((k)=>{
				//postfix: use only this for now
				if(attr==(k+"_")){
					attr_=attr.substring(0,attr.length-1);
				}
				//prefix: skip for now
				/*
				else if(attr==("_"+k)){
					attr_=attr.substring(1);					
				}
				*/
			});
			if(input.isReadonlyAttr(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isBoolean(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isDate(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isEnum(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isLocalizedDate(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isNumeric(attr)){
				json[attr_]=Number(input.get(attr));
			}
			else if(input.isObjectReference(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isObjectReferenceSet(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isPassword(attr)){
				json[attr_]=input.get(attr);
			}
			else if(input.isReference(attr)){
				json[attr_]=input.get(attr);
			}
			else{//string
				json[attr_]=input.get(attr);
			}
		});
		return Promise.resolve(JSON.stringify(json));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
