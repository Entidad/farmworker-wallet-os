// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * https://apidocs.rnd.mendix.com/9/client/mendix_lib_MxObject.html
 * 
 * getChildren(attr) â†’ {Array.<mendix/lib/MxObject>}
 * 
 * Retrieves the MxObjects referenced by a reference attribute, if these objects were retrieved together with the current one using mx.data.get's args.filter.references.
 * 
 * Otherwise returns an empty array, including the case when the reference has been modified since retrieval. When trying to retrieve a non-reference attribute this way, an exception is thrown. Passing a reference that contains multiple associations also throws an exception.
 * Parameters:
 * Name  Type  Description
 * attr  string  
 * 
 * attribute whose referenced objects to return
 * 
 * Returns:
 * 
 * MxObjects referenced by the given reference attribute
 * 
 * Type
 *     Array.<mendix/lib/MxObject> 
 * @param {MxObject} input
 * @param {string} attribute
 * @returns {Promise.<string>}
 */
export async function jsa_mxobj_getChildren_TODO(input, attribute) {
	// BEGIN USER CODE
	try{
		if(input==null)return Promise.reject("Invalid argument input");
		//todo:find means of setting output type dynamically, the only way to do this is using type parameters
		//     one way of doing this is to use both the Entity type argument as well as the type parameter, and then use an ampty list
		//     the output type will then be set to the type parameter
		//     another option would be to try an populate the type parameter input list, assuming it is passed in by reference, it should get populated in the nanoflow
		//     that way the entity attribute can be skipped
		return Promise.resolve(JSON.stringify(input.getChildren(attribute)));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
