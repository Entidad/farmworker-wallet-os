// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import {jsa_mxobj2json} from"./jsa_mxobj2json.js";
import {jsa_json2mxobj} from"./jsa_json2mxobj.js";
import {jsa_uuid} from"./jsa_uuid.js";
import SInfo from "react-native-sensitive-info";
import{mx_data_get_async,mx_data_createAsync,getReverseReferences}from"../support/entidad.js";
// END EXTRA CODE

/**
 * Gets a single Mendix object from the keychain
 * @param {string} key
 * @param {string} idval
 * @param {MxObject[]} template - output template
 * @returns {Promise.<MxObject>}
 */
export async function jsa_kcorm_get_one_recursive(key, idval, template) {
	// BEGIN USER CODE
	try{
		//if(output==null)return Promise.reject("Argument output null");
		if(key==null)return Promise.reject("Argument key null");
		let obj={};
		try{
			let kcval=null;
			if(window&&window.cordova){
				return Promise.reject("Hybrid_mobile not supported");
			}else if(navigator&&navigator.product==="ReactNative"){
				kcval=await SInfo.getItem(key,{});
			}else{
				kcval=await jsa_web_getItem(null,key);
			}
			if(kcval!=null&&kcval!="")try{
				obj=JSON.parse(kcval);
				obj=typeof(obj)=="object"?obj:Array.isArray(obj)?{}:obj;
			}catch(e){
				console.error(e.toString());
			}
		}catch(e){
			console.error(e.toString());
		}

		let entity=null;
		Object.keys(obj).forEach((mod)=>{
			Object.keys(obj[mod]).forEach((ent)=>{
				Object.keys(obj[mod][ent]).forEach((guid)=>{
					if(idval==guid)entity=mod+"."+ent;
				})
			});
		});
		console.info("entity:"+entity)
		if(entity==null)return Promise.resolve(null);
		let module_=entity.split(".")[0];
		if(module_==null||module_=="")return Promise.reject("Invalid entity module name")
		let entity_=entity.split(".")[1];
		if(entity_==null||entity_=="")return Promise.reject("Invalid entity name")
		if(typeof(obj[module_])!="object")return Promise.reject("Module "+module_+" not found");
		if(typeof(obj[module_][entity_])!="object")return Promise.reject("Entity "+entity_+" not found");
		let keys=Object.keys(obj[module_][entity_]);
		let ret=null;
		//for(let i=0;i<keys.length;i++){
			let uuid=idval;
			let json=obj[module_][entity_][uuid];
			let mxobj=await mx_data_createAsync({entity:[module_,entity_].join(".")});
			await jsa_json2mxobj(JSON.stringify(json),mxobj);
			{//references
				let attributes=mxobj.getAttributes();
				let mob=mx.meta.getMap()[mxobj.getEntity()];
				var refs=mx.meta.getMap()[mxobj.getEntity()].getReferenceAttributes();
				for(var j=0;j<refs.length;j++){
					let k=refs[j];
					try{
						let ref_entity=mx.meta.getMap()[mxobj.getEntity()].getSelectorEntity(k);
						let ref_id=json[k];
						if(ref_id!=null&&ref_id!=""){
							let lookup=obj?.[ref_entity.split(".")[0]]?.[ref_entity.split(".")[1]]?.[ref_id];
							if(typeof(lookup)!="undefined"){
								let mxobjref=await mx_data_createAsync({entity:ref_entity});
								await jsa_json2mxobj(JSON.stringify(lookup),mxobjref);
								mxobj.addReference(k,mxobjref.getGuid());
							}else{
							}
						}
					}catch(e){
						console.error(e.toString());
					}
				}
			}
			{//reverse references
				let rrefs=getReverseReferences(mxobj);
				for(var j=0;j<rrefs.length;j++){
					let rref=rrefs[j];
					let rref_entity=rref.entity;
					let rref_attr=rref.reference;
					let lookups=obj?.[rref_entity.split(".")[0]]?.[rref_entity.split(".")[1]];
					if(typeof(lookups)!="undefined"){
						let lookup=null;
						Object.keys(lookups).forEach((k)=>{
							if(lookups[k][rref_attr]==uuid){
								lookup=lookups[k];
							}
						});
						if(lookup!=null){
							try{
								let mxobjref=await mx_data_createAsync({entity:rref_entity});
								await jsa_json2mxobj(JSON.stringify(lookup),mxobjref);
								mxobjref.addReference(rref_attr,mxobj.getGuid());
							}catch(e){
								console.error(e.toString());
							}
						}else{
						}
					}else{
						console.error("no vaiable lookups found");
					}
				}
			}
			ret=(mxobj);
		//}
		return Promise.resolve(ret);
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
