// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import{Agent}from"@aries-framework/core"
import * as AriesCore from"@aries-framework/core"
import{agentDependencies}from"@aries-framework/react-native"
import{KeyDerivationMethod}from'@aries-framework/core'
import{DidCommMimeType}from'@aries-framework/core'
import{AutoAcceptCredential}from'@aries-framework/core'
import{AutoAcceptProof}from'@aries-framework/core'
import{MediatorPickupStrategy}from'@aries-framework/core'
import{ConsoleLogger,LogLevel}from'@aries-framework/core'
import support from"../support/entidad";
// END EXTRA CODE

/**
 * @param {string} label
 * @param {string} walletConfig_id
 * @param {string} walletConfig_key
 * @param {"Aries.enum_aries_KeyDerivationMethod.Argon2IMod"|"Aries.enum_aries_KeyDerivationMethod.Argon2Int"|"Aries.enum_aries_KeyDerivationMethod.Raw"} walletConfig_KeyDerivationMethod
 * @param {string} walletConfig_storage
 * @param {string} endpoints
 * @param {string} publicDidSeed
 * @param {string} indyLedgers_id
 * @param {string} indyLedgers_indyNamespace
 * @param {boolean} indyLedgers_isProduction
 * @param {string} indyLedgers_genesisPath
 * @param {string} indyLedgers_genesisTransactions
 * @param {string} indyLedgers_transactionAuthorAgreement_transactionAuthorAgreement
 * @param {string} indyLedgers_transactionAuthorAgreement_version
 * @param {string} indyLedgers_transactionAuthorAgreement_acceptanceMechanism
 * @param {boolean} connectToIndyLedgerOnStartup
 * @param {"Aries.enum_aries_Logger.Console"|"Aries.enum_aries_Logger.DefaultLogger"} logger
 * @param {"Aries.enum_aries_Loglevel.debug"|"Aries.enum_aries_Loglevel.error"|"Aries.enum_aries_Loglevel.fatal"|"Aries.enum_aries_Loglevel.info"|"Aries.enum_aries_Loglevel.off"|"Aries.enum_aries_Loglevel.test"|"Aries.enum_aries_Loglevel.trace"|"Aries.enum_aries_Loglevel.warn"} loglevel
 * @param {"Aries.enum_aries_DidCommMimeType.v0"|"Aries.enum_aries_DidCommMimeType.v1"} didCommMimeType
 * @param {"Aries.enum_aries_AutoAcceptCredential.Never"|"Aries.enum_aries_AutoAcceptCredential.ContentApproved"|"Aries.enum_aries_AutoAcceptCredential.Always"} autoAcceptCredentials
 * @param {"Aries.enum_aries_AutoAcceptProof.Never"|"Aries.enum_aries_AutoAcceptProof.ContentApproved"|"Aries.enum_aries_AutoAcceptProof.Always"} autoAcceptProofs
 * @param {boolean} autoAcceptMediationRequests
 * @param {string} mediationConnectionsInvitation
 * @param {string} defaultMediatorId
 * @param {boolean} clearDefaultMediator
 * @param {Big} mediatorPollingInterval
 * @param {"Aries.enum_aries_MediatorPickupStrategy.PickUpV1"|"Aries.enum_aries_MediatorPickupStrategy.PickUpV2"|"Aries.enum_aries_MediatorPickupStrategy.Implicit"} mediatorPickupStrategy
 * @param {Big} maximumMessagePickup
 * @param {boolean} useLegacyDidSovPrefix
 * @param {string} connectionImageUrl
 * @param {boolean} autoUpdateStorageOnStartup
 * @param {boolean} autoAcceptConnections
 * @returns {Promise.<Big>}
 */
export async function jsa_aries_agent_create(label, walletConfig_id, walletConfig_key, walletConfig_KeyDerivationMethod, walletConfig_storage, endpoints, publicDidSeed, indyLedgers_id, indyLedgers_indyNamespace, indyLedgers_isProduction, indyLedgers_genesisPath, indyLedgers_genesisTransactions, indyLedgers_transactionAuthorAgreement_transactionAuthorAgreement, indyLedgers_transactionAuthorAgreement_version, indyLedgers_transactionAuthorAgreement_acceptanceMechanism, connectToIndyLedgerOnStartup, logger, loglevel, didCommMimeType, autoAcceptCredentials, autoAcceptProofs, autoAcceptMediationRequests, mediationConnectionsInvitation, defaultMediatorId, clearDefaultMediator, mediatorPollingInterval, mediatorPickupStrategy, maximumMessagePickup, useLegacyDidSovPrefix, connectionImageUrl, autoUpdateStorageOnStartup, autoAcceptConnections) {
	// BEGIN USER CODE
	try{
		//--------------------------------------------------------------------------------
		//Take care of empty strings - set to null
		//--------------------------------------------------------------------------------
		//'mediatorConnectionsInvite', 'clearDefaultMediator' and 'defaultMediatorId'
		if(label=="")label=null;
		if(walletConfig_id=="")walletConfig_id=null;
		if(walletConfig_key=="")walletConfig_key=null;
		if(walletConfig_KeyDerivationMethod=="")walletConfig_KeyDerivationMethod=null;
		if(walletConfig_storage=="")walletConfig_storage=null;
		if(endpoints=="")endpoints=null;
		if(publicDidSeed=="")publicDidSeed=null;
		if(indyLedgers_id=="")indyLedgers_id=null;
		if(indyLedgers_indyNamespace=="")indyLedgers_indyNamespace=null;
		if(indyLedgers_isProduction=="")indyLedgers_isProduction=null;
		if(indyLedgers_genesisPath=="")indyLedgers_genesisPath=null;
		if(indyLedgers_genesisTransactions=="")indyLedgers_genesisTransactions=null;
		if(indyLedgers_transactionAuthorAgreement_transactionAuthorAgreement=="")indyLedgers_transactionAuthorAgreement_transactionAuthorAgreement=null;
		if(indyLedgers_transactionAuthorAgreement_version=="")indyLedgers_transactionAuthorAgreement_version=null;
		if(indyLedgers_transactionAuthorAgreement_acceptanceMechanism=="")indyLedgers_transactionAuthorAgreement_acceptanceMechanism=null;
		if(connectToIndyLedgerOnStartup=="")connectToIndyLedgerOnStartup=null;
		if(logger=="")logger=null;
		if(loglevel=="")loglevel=null;
		if(didCommMimeType=="")didCommMimeType=null;
		if(autoAcceptCredentials=="")autoAcceptCredentials=null;
		if(autoAcceptProofs=="")autoAcceptProofs=null;
		if(autoAcceptMediationRequests=="")autoAcceptMediationRequests=null;
		if(mediationConnectionsInvitation=="")mediationConnectionsInvitation=null;
		if(defaultMediatorId=="")defaultMediatorId=null;
		if(clearDefaultMediator=="")clearDefaultMediator=null;
		if(mediatorPollingInterval=="")mediatorPollingInterval=null;
		if(mediatorPickupStrategy=="")mediatorPickupStrategy=null;
		if(maximumMessagePickup=="")maximumMessagePickup=null;
		if(useLegacyDidSovPrefix=="")useLegacyDidSovPrefix=null;
		if(connectionImageUrl=="")connectionImageUrl=null;
		if(autoUpdateStorageOnStartup=="")autoUpdateStorageOnStartup=null;
		if(autoAcceptConnections=="")autoAcceptConnections=null;
		//--------------------------------------------------------------------------------
		//validate and prepare parameters - begin
		//--------------------------------------------------------------------------------
		if(label==null)return Promise.reject("Invalid label parameter");																		// mandatory
		if(walletConfig_id==null)return Promise.reject("Invalid walletConfig_id parameter");													// mandatory
		if(walletConfig_key==null)return Promise.reject("Invalid walletConfig_key parameter");													// mandatory
		if(walletConfig_KeyDerivationMethod==null)walletConfig_KeyDerivationMethod="Argon2IMod";												// default
		switch(walletConfig_KeyDerivationMethod){																								// -
			case"Argon2IMod":																													// -
				walletConfig_KeyDerivationMethod=KeyDerivationMethod.Argon2IMod;																// -
				break;																															// -
			case"Argon2Int":																													// -
				walletConfig_KeyDerivationMethod=KeyDerivationMethod.Argon2Int;																	// -
				break;																															// -
			case"Raw":																															// -
				walletConfig_KeyDerivationMethod=KeyDerivationMethod.Raw;																		// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid walletConfig_KeyDerivationMethod parameter");													// -
				break;																															// -
		}																																		// -
		if(walletConfig_storage==null);																											// optional
		if(endpoints==null);																													// optional
		if(publicDidSeed==null);																												// optional
		if(indyLedgers_id==null);																												// optional
		if(indyLedgers_indyNamespace==null);																									// optional
		if(indyLedgers_isProduction==null);																										// optional
		if(indyLedgers_genesisPath==null);																										// optional
		if(indyLedgers_genesisTransactions==null);																								// optional
		if(indyLedgers_genesisTransactions!=null);																								// optional
		if(indyLedgers_transactionAuthorAgreement_transactionAuthorAgreement==null);															// optional
		if(indyLedgers_transactionAuthorAgreement_version==null);																				// optional
		if(indyLedgers_transactionAuthorAgreement_acceptanceMechanism==null);																	// optional
		if(connectToIndyLedgerOnStartup==null);																									// optional
		if(loglevel==null)loglevel="off";																										// default
		switch(loglevel){																														// -
			case"debug":																														// -
				loglevel=LogLevel.debug;																										// -
				break;																															// -
			case"error":																														// -
				loglevel=LogLevel.error;																										// -
				break;																															// -
			case"fatal":																														// -
				loglevel=LogLevel.fatal;																										// -
				break;																															// -
			case"info":																															// -
				loglevel=LogLevel.info;																											// -
				break;																															// -
			case"off":																															// -
				loglevel=LogLevel.off;																											// -
				break;																															// -
			case"test":																															// -
				loglevel=LogLevel.test;																											// -
				break;																															// -
			case"trace":																														// -
				loglevel=LogLevel.warn;																											// -
				break;																															// -
			case"warn":																															// -
				loglevel=LogLevel.warn;																											// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid loglevel parameter");																			// -
				break;																															// -
		}																																		// -
		if(logger==null)logger="DefaultLogger";																									// default
		switch(logger){																															// -
			case"Console":																														// -
				logger=new support.logging.ConsoleLogger(loglevel);																				// -
				break;																															// -
			case"DefaultLogger":																												// -
				logger=new ConsoleLogger(loglevel);																								// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid logger parameter");																				// -
				break;																															// -
		}																																		// -
		if(didCommMimeType==null)didCommMimeType="v0";																							// default
		switch(didCommMimeType){																												// -
			case"v0":																															// -
				didCommMimeType=DidCommMimeType.V0;																								// -
				break;																															// -
			case"v1":																															// -
				didCommMimeType=DidCommMimeType.V1;																								// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid didCommMimeType parameter");																		// -
				break;																															// -
		}																																		// -
		if(autoAcceptCredentials==null)autoAcceptCredentials="Never";																			// default
		switch(autoAcceptCredentials){																											// -
			case"Never":																														// -
				autoAcceptCredential_=AutoAcceptCredential.Never;																				// -
				break;																															// -
			case"ContentApproved":																												// -
				autoAcceptCredential_=AutoAcceptCredential.ContentApproved;																		// -
				break;																															// -
			case"Always":																														// -
				autoAcceptCredential_=AutoAcceptCredential.Always;																				// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid autoAcceptCredentials parameter");																// -
				break;																															// -
		}																																		// -
		if(autoAcceptProofs==null)autoAcceptProofs="Never";																						// default
		switch(autoAcceptProofs){																												// -
			case"Never":																														// -
				autoAcceptProofs=AutoAcceptProof.Never;																							// -
				break;																															// -
			case"ContentApproved":																												// -
				autoAcceptProofs=AutoAcceptProof.ContentApproved;																				// -
				break;																															// -
			case"Always":																														// -
				autoAcceptProofs=AutoAcceptProof.Always;																						// -
				break;																															// -
			default:																															// -
				return Promise.reject("Invalid autoAcceptProofs parameter");																	// -
				break;																															// -
		}																																		// -
		if(autoAcceptMediationRequests==null);																									// optional
		if(mediationConnectionsInvitation==null);																								// optional
		if(defaultMediatorId==null);																											// optional
		if(clearDefaultMediator==null)clearDefaultMediator=false;																				// default
		if(mediatorPollingInterval==null)mediatorPollingInterval=5000;																		// optional
		if(mediatorPickupStrategy==null);																										// optional
		switch(mediatorPickupStrategy){																											// -
			case"PickUpV1":																														// -
				mediatorPickupStrategy=MediatorPickupStrategy.PickUpV1;																			// -
				break;																															// -
			case"PickUpV2":																														// -
				mediatorPickupStrategy=MediatorPickupStrategy.PickUpV2;																			// -
				break;																															// -
			case"Implicit":																														// -
				mediatorPickupStrategy=MediatorPickupStrategy.Implicit;																			// -
				break;																															// -
			default:																															// -
				//return Promise.reject("Invalid mediatorPickupStrategy parameter");																// -
				break;																															// -
		}																																		// -
		if(maximumMessagePickup==null)maximumMessagePickup=10;																											// optional
		if(useLegacyDidSovPrefix==null)useLegacyDidSovPrefix=false;																				// default
		if(connectionImageUrl==null);																											// optional
		if(autoUpdateStorageOnStartup==null)autoUpdateStorageOnStartup=false;																	// optional
		if(autoAcceptConnections==null)autoAcceptConnections=false;																				// default
		//--------------------------------------------------------------------------------
		//validate and prepare parameters - end
		//--------------------------------------------------------------------------------
		//construct configuration parameter - begin
		//--------------------------------------------------------------------------------
		let config={};
		if(label!=null)config.label=label;
		if(
			walletConfig_KeyDerivationMethod!=null||
			walletConfig_id!=null||
			walletConfig_key!=null||
			walletConfig_storage
		){
			let walletConfig={};
			if(walletConfig_id!=null)walletConfig.id=walletConfig_id;
			if(walletConfig_key!=null)walletConfig.key=walletConfig_key;
			if(walletConfig_KeyDerivationMethod!=null)walletConfig.keyDerivationMethod=walletConfig_KeyDerivationMethod;
			if(walletConfig_storage!=null)walletConfig.storage=walletConfig_storage;
			config.walletConfig=walletConfig;
		}else{
			return Promise.reject("walletConfig parameters not specified");
		}
		if(endpoints!=null)config.endpoints=JSON.parse(endpoints);
		if(publicDidSeed!=null)config.publicDidSeed=publicDidSeed;
		if(didCommMimeType!=null)config.didCommMimeType=didCommMimeType;
		if(autoAcceptCredentials!=null)config.autoAcceptCredentials=autoAcceptCredentials;
		if(autoAcceptProofs!=null)config.autoAcceptProofs=autoAcceptProofs;
		if(autoAcceptMediationRequests!=null)config.autoAcceptMediationRequests=autoAcceptMediationRequests;
		if(mediationConnectionsInvitation!=null&&mediationConnectionsInvitation!="")config.mediatorConnectionsInvite=mediationConnectionsInvitation;
		if(defaultMediatorId!=null&&defaultMediatorId!="")config.defaultMediatorId=defaultMediatorId;
		if(clearDefaultMediator!=null&&clearDefaultMediator!=false)config.clearDefaultMediator=clearDefaultMediator;
		//useDidSovPrefixWhereAllowed ??? boolean
		//useDidKeyInProtocols ??? boolean
		if(mediatorPollingInterval!=null)config.mediatorPollingInterval=mediatorPollingInterval;
		if(mediatorPickupStrategy!=null)config.mediatorPickupStrategy=mediatorPickupStrategy;
		if(maximumMessagePickup!=null)config.maximumMessagePickup=maximumMessagePickup;
		if(useLegacyDidSovPrefix!=null&&useLegacyDidSovPrefix!=false)config.useLegacyDidSovPrefix=useLegacyDidSovPrefix;
		if(connectionImageUrl!=null)config.connectionImageUrl=connectionImageUrl;
		if(autoUpdateStorageOnStartup!=null&&autoUpdateStorageOnStartup!=false)config.autoUpdateStorageOnStartup=autoUpdateStorageOnStartup;
		if(autoAcceptConnections!=null&&autoAcceptConnections==true)config.autoAcceptConnections=autoAcceptConnections;		
		if(connectToIndyLedgerOnStartup!=null)config.connectToIndyLedgerOnStartup=connectToIndyLedgerOnStartup;
		if(logger!=null)config.logger=logger;
		if(
			indyLedgers_id!=null||
			//indyLedgers_isProduction!=null||
			indyLedgers_indyNamespace!=null||
			indyLedgers_genesisTransactions!=null||
			indyLedgers_genesisPath!=null||
			indyLedgers_transactionAuthorAgreement_version!=null||
			indyLedgers_transactionAuthorAgreement_acceptanceMechanism
		){
			let indyLedger={};
			if(indyLedgers_id!=null)indyLedger.id=indyLedgers_id;
			if(indyLedgers_indyNamespace!=null)indyLedger.indyNamespace=indyLedgers_indyNamespace;
			if(indyLedgers_isProduction!=null)indyLedger.isProduction=indyLedgers_isProduction;
			if(indyLedgers_genesisTransactions!=null)indyLedger.genesisTransactions=indyLedgers_genesisTransactions;
			if(indyLedgers_genesisPath!=null)indyLedger.genesisPath=indyLedgers_genesisPath;
			if(
				indyLedgers_transactionAuthorAgreement_version!=null||
				indyLedgers_transactionAuthorAgreement_acceptanceMechanism				
			){
				indyLedger.transactionAuthorAgreement={};
				if(indyLedgers_transactionAuthorAgreement_version!=null)indyLedger.transactionAuthorAgreement.version=indyLedgers_transactionAuthorAgreement_version;
				if(indyLedgers_transactionAuthorAgreement_acceptanceMechanism!=null)indyLedger.transactionAuthorAgreement.acceptanceMechanism=indyLedgers_transactionAuthorAgreement_acceptanceMechanism;
			}
			config.indyLedgers=[indyLedger];
		}else{
		}
		//--------------------------------------------------------------------------------
		//construct configuration parameter - end
		//--------------------------------------------------------------------------------
		//Note: The setLogger and setDefaultLogger methods have only been implemented in the Node.JS wrapper of the indy sdk. This won't work when importing from @aries-framework/react-native
		//agentDependencies.indy.setDefaultLogger(loglevel);//todo
		//agentDependencies.indy.setLogger((level, target, message, modulePath, file, line) => {console.log('libindy said:', level, target, message, modulePath, file, line)})		
		const agent=new Agent({
			config,
			dependencies:agentDependencies,
		});
		/*
		//shutdown
		await agent.inboundTransports[0].stop();
		await agent.outboundTransports[0].stop();
		await agent.wallet.close();
		*/
		return Promise.resolve(support.cache.put(agent));
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
