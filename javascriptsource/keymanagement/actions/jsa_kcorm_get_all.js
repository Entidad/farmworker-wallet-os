// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import SInfo from "react-native-sensitive-info";

// BEGIN EXTRA CODE
import {jsa_json2mxobj} from"./jsa_json2mxobj.js";
//import {jsa_web_setItem}from"./jsa_web_setItem.js";
import {jsa_web_getItem}from"./jsa_web_getItem.js";
async function mx_data_createAsync(options){
		return new Promise((resolve,reject)=>{
				try{
						mx.data.create(
								{
										entity:options.entity,
										callback:(obj)=>{
												resolve(obj);
										},
										error:(e)=>{
												reject(e);
										}
								}
						);
				}catch(e){
						reject(e);
				}
		});
}
// END EXTRA CODE

/**
 * Get all objects of a certain type from the keychain
 * @param {string} key
 * @param {string} entity
 * @param {MxObject[]} output - output list to populate
 * @returns {Promise.<MxObject[]>}
 */
export async function jsa_kcorm_get_all(key, entity, output) {
	// BEGIN USER CODE
	// --------------
	// IN PROGRESS...
	// --------------
	try{
		if(output==null)return Promise.reject("Argument output null");
		if(key==null)return Promise.reject("Argument key null");
		let obj={};
		try{
			//https://mcodex.dev/react-native-sensitive-info/docs/getItem
			let kcval=null;
			if(window&&window.cordova){
				//hybrid mobile
				return Promise.reject("Hybrid_mobile not supported");
			}else if (navigator && navigator.product === "ReactNative") {
				//react native
				kcval=await SInfo.getItem(key,{});
			}else {
				//web
				kcval=await jsa_web_getItem(null,key);
			}
			//let kcval=await SInfo.getItem(key,{});
			if(kcval!=null&&kcval!="")try{
				obj=JSON.parse(kcval);
				obj=typeof(obj)=="object"?obj:Array.isArray(obj)?{}:obj;
			}catch(e){
				console.error(e.toString());
				//todo:handle/log
			}
		}catch(e){
			//todo:handle/log
			console.error(e.toString());
		}
		let module_=entity.split(".")[0];
		if(module_==null||module_=="")return Promise.reject("Invalid entity module name")
		let entity_=entity.split(".")[1];
		if(entity_==null||entity_=="")return Promise.reject("Invalid entity name")
		//throw on module or entity subobjects not found 
		if(typeof(obj[module_])!="object")return Promise.reject("Module "+module_+" not found");
		if(typeof(obj[module_][entity_])!="object")return Promise.reject("Entity "+entity_+" not found");
		let keys=Object.keys(obj[module_][entity_]);
		let ret=[];
		for(let i=0;i<keys.length;i++){
			let uuid=keys[i];
			let json=obj[module_][entity_][uuid];
			let mxobj=await mx_data_createAsync({entity:[module_,entity_].join(".")});
			await jsa_json2mxobj(JSON.stringify(json),mxobj);
			ret.push(mxobj);
		}
		//todo: return values
		return Promise.resolve(ret);
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
